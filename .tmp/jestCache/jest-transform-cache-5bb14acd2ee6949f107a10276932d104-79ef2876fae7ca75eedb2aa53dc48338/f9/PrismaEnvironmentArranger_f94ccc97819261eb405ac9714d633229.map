{"file":"C:\\Users\\epatr\\projects\\ExchangeNest-Backend\\tests\\Contexts\\Shared\\infrastructure\\prisma\\PrismaEnvironmentArranger.ts","mappings":";;;;;;;;;;;;AAAA,kIAAkH;AAClH,yEAAsE;AAEtE,MAAa,yBAA0B,SAAQ,yCAAmB;IACnD,OAAO;;YAClB,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;QAC7B,CAAC;KAAA;IAEe,aAAa;;YAC3B,MAAM,UAAU,GAAG,MAAM,4BAAM,CAAC,SAAS,CAAU;;;;sFAI+B,CAAA;YAElF,KAAK,MAAM,SAAS,IAAI,UAAU,EAAE;gBAClC,MAAM,4BAAM,CAAC,SAAS,CAAA,kBAAkB,SAAS,EAAE,CAAA;aACpD;QACH,CAAC;KAAA;IAEY,KAAK;;YAChB,OAAO,MAAM,4BAAM,CAAC,WAAW,EAAE,CAAC;QACpC,CAAC;KAAA;CACF;AApBD,8DAoBC","names":[],"sources":["C:\\Users\\epatr\\projects\\ExchangeNest-Backend\\tests\\Contexts\\Shared\\infrastructure\\prisma\\PrismaEnvironmentArranger.ts"],"sourcesContent":["import { prisma } from '../../../../../src/Contexts/Shared/infrastructure/persistence/prisma/PrismaClientFactory';\r\nimport { EnvironmentArranger } from '../arranger/EnvironmentArranger';\r\n\r\nexport class PrismaEnvironmentArranger extends EnvironmentArranger {\r\n  public async arrange(): Promise<void> {\r\n    await this.cleanDatabase();\r\n  }\r\n\r\n  protected async cleanDatabase(): Promise<void> {\r\n    const tableNames = await prisma.$queryRaw<string[]>`SELECT table_name\r\n                                                        FROM information_schema.tables\r\n                                                        WHERE table_schema='public'\r\n                                                        AND table_type='BASE TABLE'\r\n                                                        AND table_name NOT LIKE '\\_%'`\r\n\r\n    for (const tableName of tableNames) {\r\n      await prisma.$queryRaw`TRUNCATE TABLE ${tableName}`\r\n    }\r\n  }\r\n\r\n  public async close(): Promise<void> {\r\n    return await prisma.$disconnect();\r\n  }\r\n}"],"version":3}