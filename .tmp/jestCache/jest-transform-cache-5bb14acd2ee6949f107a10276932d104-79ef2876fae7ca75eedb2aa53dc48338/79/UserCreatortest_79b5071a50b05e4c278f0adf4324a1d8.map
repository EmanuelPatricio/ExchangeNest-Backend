{"file":"C:\\Users\\epatr\\projects\\ExchangeNest-Backend\\tests\\Contexts\\PIE\\Users\\application\\UserCreator.test.ts","mappings":";;;;;;;;;;;AAAA,+FAA2F;AAC3F,qEAAiE;AACjE,kIAA8H;AAC9H,wEAAoE;AACpE,uEAAmE;AAEnE,IAAI,UAA8B,CAAA;AAClC,IAAI,OAAoB,CAAA;AAExB,UAAU,CAAC,GAAG,EAAE;IACd,UAAU,GAAG,IAAI,uCAAkB,EAAE,CAAA;IACrC,OAAO,GAAG,IAAI,yBAAW,CAAC,UAAU,CAAC,CAAA;AACvC,CAAC,CAAC,CAAA;AAEF,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;IAC3B,EAAE,CAAC,4BAA4B,EAAE,GAAS,EAAE;QAC1C,MAAM,OAAO,GAAG,iDAAuB,CAAC,MAAM,EAAE,CAAA;QAEhD,MAAM,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;QAE1B,MAAM,IAAI,GAAG,uBAAU,CAAC,WAAW,CAAC,OAAO,CAAC,CAAA;QAE5C,UAAU,CAAC,4BAA4B,CAAC,IAAI,CAAC,CAAA;IAC/C,CAAC,CAAA,CAAC,CAAC;IAEH,EAAE,CAAC,0DAA0D,EAAE,GAAS,EAAE;QACxE,MAAM,CAAC,GAAG,EAAE;YACV,MAAM,OAAO,GAAG,iDAAuB,CAAC,cAAc,EAAE,CAAA;YAExD,MAAM,IAAI,GAAG,uBAAU,CAAC,WAAW,CAAC,OAAO,CAAC,CAAA;YAE5C,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;YAEpB,UAAU,CAAC,4BAA4B,CAAC,IAAI,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC,OAAO,CAAC,iEAA+B,CAAC,CAAC;IAC9C,CAAC,CAAA,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\epatr\\projects\\ExchangeNest-Backend\\tests\\Contexts\\PIE\\Users\\application\\UserCreator.test.ts"],"sourcesContent":["import { UserCreator } from '../../../../../src/Contexts/PIE/Users/application/UserCreator'\r\nimport { UserMother } from '../../../PIE/Users/domain/UserMother'\r\nimport { UserFirstLastNameLengthExceeded } from '../../../../../src/Contexts/PIE/Users/domain/UserFirstLastNameLengthExceeded'\r\nimport { UserRepositoryMock } from '../__mocks__/UserRepositoryMock'\r\nimport { CreateUserRequestMother } from './CreateUserRequestMother'\r\n\r\nlet repository: UserRepositoryMock\r\nlet creator: UserCreator\r\n\r\nbeforeEach(() => {\r\n  repository = new UserRepositoryMock()\r\n  creator = new UserCreator(repository)\r\n})\r\n\r\ndescribe('UserCreator', () => {\r\n  it('should create a valid user', async () => {\r\n    const request = CreateUserRequestMother.random()\r\n\r\n    await creator.run(request)\r\n\r\n    const user = UserMother.fromRequest(request)\r\n\r\n    repository.assertSaveHaveBeenCalledWith(user)\r\n  });\r\n\r\n  it('should throw error if user first name length is exceeded', async () => {\r\n    expect(() => {\r\n      const request = CreateUserRequestMother.invalidRequest()\r\n\r\n      const user = UserMother.fromRequest(request)\r\n\r\n      creator.run(request)\r\n\r\n      repository.assertSaveHaveBeenCalledWith(user);\r\n    }).toThrow(UserFirstLastNameLengthExceeded);\r\n  });\r\n});"],"version":3}