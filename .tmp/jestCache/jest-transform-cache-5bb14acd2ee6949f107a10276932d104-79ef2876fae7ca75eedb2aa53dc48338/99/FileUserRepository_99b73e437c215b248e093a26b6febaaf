ff2abc0849c63b86f91261ed5eee4282
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileUserRepository = void 0;
const bson_1 = require("bson");
const fs_1 = __importDefault(require("fs"));
const User_1 = require("../../domain/User");
const path_1 = __importDefault(require("path"));
class FileUserRepository {
    constructor() {
        this.FILE_PATH = path_1.default.join(__dirname, 'users').replace(/\\/g, '/');
    }
    save(user) {
        return __awaiter(this, void 0, void 0, function* () {
            yield fs_1.default.promises.writeFile(this.filePath(user.id.value), (0, bson_1.serialize)(user));
        });
    }
    search(userId) {
        return __awaiter(this, void 0, void 0, function* () {
            const userData = yield fs_1.default.promises.readFile(this.filePath(userId));
            const { id, firstName, lastName, nic, email, password, birthDate, userImage, idRole, idUserStatus, idCountry, createdOn, createdBy, lastModifiedOn, lastModifiedBy } = (0, bson_1.deserialize)(userData);
            return new User_1.User(id, firstName, lastName, nic, email, password, birthDate, userImage, idRole, idUserStatus, idCountry, createdOn, createdBy, lastModifiedOn, lastModifiedBy);
        });
    }
    login(_email, _password) {
        return __awaiter(this, void 0, void 0, function* () {
            // const userData = await fs.promises.readFile(this.filePath(userId));
            // const { id, firstName, lastName, nic, email, password, birthDate, userImage, idRole, idUserStatus, idCountry, createdOn, createdBy, lastModifiedOn, lastModifiedBy } = deserialize(userData);
            // return new User(id, firstName, lastName, nic, email, password, birthDate, userImage, idRole, idUserStatus, idCountry, createdOn, createdBy, lastModifiedOn, lastModifiedBy);
            return null;
        });
    }
    filePath(id) {
        return `${this.FILE_PATH}.${id}.repo`;
    }
}
exports.FileUserRepository = FileUserRepository;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxlcGF0clxccHJvamVjdHNcXEV4Y2hhbmdlTmVzdC1CYWNrZW5kXFxzcmNcXENvbnRleHRzXFxQSUVcXFVzZXJzXFxpbmZyYXN0cnVjdHVyZVxccGVyc2lzdGVuY2VcXEZpbGVVc2VyUmVwb3NpdG9yeS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQSwrQkFBOEM7QUFDOUMsNENBQW9CO0FBQ3BCLDRDQUF5QztBQUV6QyxnREFBd0I7QUFLeEIsTUFBYSxrQkFBa0I7SUFBL0I7UUFDVSxjQUFTLEdBQUcsY0FBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQTtJQTBCdEUsQ0FBQztJQXhCTyxJQUFJLENBQUMsSUFBVTs7WUFDbkIsTUFBTSxZQUFFLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsSUFBQSxnQkFBUyxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDN0UsQ0FBQztLQUFBO0lBRUssTUFBTSxDQUFDLE1BQWM7O1lBQ3pCLE1BQU0sUUFBUSxHQUFHLE1BQU0sWUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBRW5FLE1BQU0sRUFBRSxFQUFFLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsY0FBYyxFQUFFLGNBQWMsRUFBRSxHQUFHLElBQUEsa0JBQVcsRUFBQyxRQUFRLENBQUMsQ0FBQztZQUU3TCxPQUFPLElBQUksV0FBSSxDQUFDLEVBQUUsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxjQUFjLEVBQUUsY0FBYyxDQUFDLENBQUM7UUFDOUssQ0FBQztLQUFBO0lBRUssS0FBSyxDQUFDLE1BQWlCLEVBQUUsU0FBdUI7O1lBQ3BELHNFQUFzRTtZQUV0RSxnTUFBZ007WUFFaE0sK0tBQStLO1lBQy9LLE9BQU8sSUFBSSxDQUFBO1FBQ2IsQ0FBQztLQUFBO0lBRU8sUUFBUSxDQUFDLEVBQVU7UUFDekIsT0FBTyxHQUFHLElBQUksQ0FBQyxTQUFTLElBQUksRUFBRSxPQUFPLENBQUM7SUFDeEMsQ0FBQztDQUNGO0FBM0JELGdEQTJCQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXGVwYXRyXFxwcm9qZWN0c1xcRXhjaGFuZ2VOZXN0LUJhY2tlbmRcXHNyY1xcQ29udGV4dHNcXFBJRVxcVXNlcnNcXGluZnJhc3RydWN0dXJlXFxwZXJzaXN0ZW5jZVxcRmlsZVVzZXJSZXBvc2l0b3J5LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNlcmlhbGl6ZSwgZGVzZXJpYWxpemUgfSBmcm9tICdic29uJztcclxuaW1wb3J0IGZzIGZyb20gJ2ZzJztcclxuaW1wb3J0IHsgVXNlciB9IGZyb20gJy4uLy4uL2RvbWFpbi9Vc2VyJztcclxuaW1wb3J0IHsgVXNlclJlcG9zaXRvcnkgfSBmcm9tICcuLi8uLi9kb21haW4vVXNlclJlcG9zaXRvcnknO1xyXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcclxuaW1wb3J0IHsgTnVsbGFibGUgfSBmcm9tICdzcmMvQ29udGV4dHMvU2hhcmVkL2RvbWFpbi9OdWxsYWJsZSc7XHJcbmltcG9ydCB7IFVzZXJQYXNzd29yZCB9IGZyb20gJy4uLy4uL2RvbWFpbi9Vc2VyUGFzc3dvcmQnO1xyXG5pbXBvcnQgeyBVc2VyRW1haWwgfSBmcm9tICcuLi8uLi9kb21haW4vVXNlckVtYWlsJztcclxuXHJcbmV4cG9ydCBjbGFzcyBGaWxlVXNlclJlcG9zaXRvcnkgaW1wbGVtZW50cyBVc2VyUmVwb3NpdG9yeSB7XHJcbiAgcHJpdmF0ZSBGSUxFX1BBVEggPSBwYXRoLmpvaW4oX19kaXJuYW1lLCd1c2VycycpLnJlcGxhY2UoL1xcXFwvZywgJy8nKVxyXG5cclxuICBhc3luYyBzYXZlKHVzZXI6IFVzZXIpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIGF3YWl0IGZzLnByb21pc2VzLndyaXRlRmlsZSh0aGlzLmZpbGVQYXRoKHVzZXIuaWQudmFsdWUpLCBzZXJpYWxpemUodXNlcikpO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgc2VhcmNoKHVzZXJJZDogbnVtYmVyKTogUHJvbWlzZTxVc2VyPiB7XHJcbiAgICBjb25zdCB1c2VyRGF0YSA9IGF3YWl0IGZzLnByb21pc2VzLnJlYWRGaWxlKHRoaXMuZmlsZVBhdGgodXNlcklkKSk7XHJcbiAgICBcclxuICAgIGNvbnN0IHsgaWQsIGZpcnN0TmFtZSwgbGFzdE5hbWUsIG5pYywgZW1haWwsIHBhc3N3b3JkLCBiaXJ0aERhdGUsIHVzZXJJbWFnZSwgaWRSb2xlLCBpZFVzZXJTdGF0dXMsIGlkQ291bnRyeSwgY3JlYXRlZE9uLCBjcmVhdGVkQnksIGxhc3RNb2RpZmllZE9uLCBsYXN0TW9kaWZpZWRCeSB9ID0gZGVzZXJpYWxpemUodXNlckRhdGEpO1xyXG5cclxuICAgIHJldHVybiBuZXcgVXNlcihpZCwgZmlyc3ROYW1lLCBsYXN0TmFtZSwgbmljLCBlbWFpbCwgcGFzc3dvcmQsIGJpcnRoRGF0ZSwgdXNlckltYWdlLCBpZFJvbGUsIGlkVXNlclN0YXR1cywgaWRDb3VudHJ5LCBjcmVhdGVkT24sIGNyZWF0ZWRCeSwgbGFzdE1vZGlmaWVkT24sIGxhc3RNb2RpZmllZEJ5KTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGxvZ2luKF9lbWFpbDogVXNlckVtYWlsLCBfcGFzc3dvcmQ6IFVzZXJQYXNzd29yZCk6IFByb21pc2U8TnVsbGFibGU8VXNlcj4+IHtcclxuICAgIC8vIGNvbnN0IHVzZXJEYXRhID0gYXdhaXQgZnMucHJvbWlzZXMucmVhZEZpbGUodGhpcy5maWxlUGF0aCh1c2VySWQpKTtcclxuICAgIFxyXG4gICAgLy8gY29uc3QgeyBpZCwgZmlyc3ROYW1lLCBsYXN0TmFtZSwgbmljLCBlbWFpbCwgcGFzc3dvcmQsIGJpcnRoRGF0ZSwgdXNlckltYWdlLCBpZFJvbGUsIGlkVXNlclN0YXR1cywgaWRDb3VudHJ5LCBjcmVhdGVkT24sIGNyZWF0ZWRCeSwgbGFzdE1vZGlmaWVkT24sIGxhc3RNb2RpZmllZEJ5IH0gPSBkZXNlcmlhbGl6ZSh1c2VyRGF0YSk7XHJcblxyXG4gICAgLy8gcmV0dXJuIG5ldyBVc2VyKGlkLCBmaXJzdE5hbWUsIGxhc3ROYW1lLCBuaWMsIGVtYWlsLCBwYXNzd29yZCwgYmlydGhEYXRlLCB1c2VySW1hZ2UsIGlkUm9sZSwgaWRVc2VyU3RhdHVzLCBpZENvdW50cnksIGNyZWF0ZWRPbiwgY3JlYXRlZEJ5LCBsYXN0TW9kaWZpZWRPbiwgbGFzdE1vZGlmaWVkQnkpO1xyXG4gICAgcmV0dXJuIG51bGxcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZmlsZVBhdGgoaWQ6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gYCR7dGhpcy5GSUxFX1BBVEh9LiR7aWR9LnJlcG9gO1xyXG4gIH1cclxufSJdLCJ2ZXJzaW9uIjozfQ==