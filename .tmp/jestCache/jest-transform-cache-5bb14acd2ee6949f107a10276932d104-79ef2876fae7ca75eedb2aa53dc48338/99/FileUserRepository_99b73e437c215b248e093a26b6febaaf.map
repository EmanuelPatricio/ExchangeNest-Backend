{"file":"C:\\Users\\epatr\\projects\\ExchangeNest-Backend\\src\\Contexts\\PIE\\Users\\infrastructure\\persistence\\FileUserRepository.ts","mappings":";;;;;;;;;;;;;;;AAAA,+BAA8C;AAC9C,4CAAoB;AACpB,4CAAyC;AAEzC,gDAAwB;AAKxB,MAAa,kBAAkB;IAA/B;QACU,cAAS,GAAG,cAAI,CAAC,IAAI,CAAC,SAAS,EAAC,OAAO,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAA;IA0BtE,CAAC;IAxBO,IAAI,CAAC,IAAU;;YACnB,MAAM,YAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,IAAA,gBAAS,EAAC,IAAI,CAAC,CAAC,CAAC;QAC7E,CAAC;KAAA;IAEK,MAAM,CAAC,MAAc;;YACzB,MAAM,QAAQ,GAAG,MAAM,YAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;YAEnE,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,EAAE,KAAK,EAAE,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAE,MAAM,EAAE,YAAY,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,cAAc,EAAE,cAAc,EAAE,GAAG,IAAA,kBAAW,EAAC,QAAQ,CAAC,CAAC;YAE7L,OAAO,IAAI,WAAI,CAAC,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,EAAE,KAAK,EAAE,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAE,MAAM,EAAE,YAAY,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,cAAc,EAAE,cAAc,CAAC,CAAC;QAC9K,CAAC;KAAA;IAEK,KAAK,CAAC,MAAiB,EAAE,SAAuB;;YACpD,sEAAsE;YAEtE,gMAAgM;YAEhM,+KAA+K;YAC/K,OAAO,IAAI,CAAA;QACb,CAAC;KAAA;IAEO,QAAQ,CAAC,EAAU;QACzB,OAAO,GAAG,IAAI,CAAC,SAAS,IAAI,EAAE,OAAO,CAAC;IACxC,CAAC;CACF;AA3BD,gDA2BC","names":[],"sources":["C:\\Users\\epatr\\projects\\ExchangeNest-Backend\\src\\Contexts\\PIE\\Users\\infrastructure\\persistence\\FileUserRepository.ts"],"sourcesContent":["import { serialize, deserialize } from 'bson';\r\nimport fs from 'fs';\r\nimport { User } from '../../domain/User';\r\nimport { UserRepository } from '../../domain/UserRepository';\r\nimport path from 'path';\r\nimport { Nullable } from 'src/Contexts/Shared/domain/Nullable';\r\nimport { UserPassword } from '../../domain/UserPassword';\r\nimport { UserEmail } from '../../domain/UserEmail';\r\n\r\nexport class FileUserRepository implements UserRepository {\r\n  private FILE_PATH = path.join(__dirname,'users').replace(/\\\\/g, '/')\r\n\r\n  async save(user: User): Promise<void> {\r\n    await fs.promises.writeFile(this.filePath(user.id.value), serialize(user));\r\n  }\r\n\r\n  async search(userId: number): Promise<User> {\r\n    const userData = await fs.promises.readFile(this.filePath(userId));\r\n    \r\n    const { id, firstName, lastName, nic, email, password, birthDate, userImage, idRole, idUserStatus, idCountry, createdOn, createdBy, lastModifiedOn, lastModifiedBy } = deserialize(userData);\r\n\r\n    return new User(id, firstName, lastName, nic, email, password, birthDate, userImage, idRole, idUserStatus, idCountry, createdOn, createdBy, lastModifiedOn, lastModifiedBy);\r\n  }\r\n\r\n  async login(_email: UserEmail, _password: UserPassword): Promise<Nullable<User>> {\r\n    // const userData = await fs.promises.readFile(this.filePath(userId));\r\n    \r\n    // const { id, firstName, lastName, nic, email, password, birthDate, userImage, idRole, idUserStatus, idCountry, createdOn, createdBy, lastModifiedOn, lastModifiedBy } = deserialize(userData);\r\n\r\n    // return new User(id, firstName, lastName, nic, email, password, birthDate, userImage, idRole, idUserStatus, idCountry, createdOn, createdBy, lastModifiedOn, lastModifiedBy);\r\n    return null\r\n  }\r\n\r\n  private filePath(id: number): string {\r\n    return `${this.FILE_PATH}.${id}.repo`;\r\n  }\r\n}"],"version":3}